# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import windows_service_pb2 as windows__service__pb2


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_info = channel.unary_stream(
            '/windows_service.Service/get_info',
            request_serializer=windows__service__pb2.ServiceInfoRequest.SerializeToString,
            response_deserializer=windows__service__pb2.ServiceResponse.FromString,
        )
        self.start = channel.unary_unary(
            '/windows_service.Service/start',
            request_serializer=windows__service__pb2.StartServiceRequest.SerializeToString,
            response_deserializer=windows__service__pb2.ServiceResponse.FromString,
        )
        self.stop = channel.unary_unary(
            '/windows_service.Service/stop',
            request_serializer=windows__service__pb2.StopServiceRequest.SerializeToString,
            response_deserializer=windows__service__pb2.ServiceResponse.FromString,
        )
        self.restart = channel.unary_unary(
            '/windows_service.Service/restart',
            request_serializer=windows__service__pb2.RestartServiceRequest.SerializeToString,
            response_deserializer=windows__service__pb2.ServiceResponse.FromString,
        )


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'get_info': grpc.unary_stream_rpc_method_handler(
            servicer.get_info,
            request_deserializer=windows__service__pb2.ServiceInfoRequest.FromString,
            response_serializer=windows__service__pb2.ServiceResponse.SerializeToString,
        ),
        'start': grpc.unary_unary_rpc_method_handler(
            servicer.start,
            request_deserializer=windows__service__pb2.StartServiceRequest.FromString,
            response_serializer=windows__service__pb2.ServiceResponse.SerializeToString,
        ),
        'stop': grpc.unary_unary_rpc_method_handler(
            servicer.stop,
            request_deserializer=windows__service__pb2.StopServiceRequest.FromString,
            response_serializer=windows__service__pb2.ServiceResponse.SerializeToString,
        ),
        'restart': grpc.unary_unary_rpc_method_handler(
            servicer.restart,
            request_deserializer=windows__service__pb2.RestartServiceRequest.FromString,
            response_serializer=windows__service__pb2.ServiceResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'windows_service.Service', rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_info(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/windows_service.Service/get_info',
            windows__service__pb2.ServiceInfoRequest.SerializeToString,
            windows__service__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def start(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/windows_service.Service/start',
            windows__service__pb2.StartServiceRequest.SerializeToString,
            windows__service__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def stop(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/windows_service.Service/stop',
            windows__service__pb2.StopServiceRequest.SerializeToString,
            windows__service__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def restart(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/windows_service.Service/restart',
            windows__service__pb2.RestartServiceRequest.SerializeToString,
            windows__service__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
